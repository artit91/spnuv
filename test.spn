let spnuv = dynld("spnuv");

let loop = spnuv.Loop.defaultLoop();
let server = spnuv.TCP.new(loop);
let signal = spnuv.Signal.new(loop);
let clients = {};

let SIGINT = 2;

fn onRead client {
    return fn err data {
        if (err != nil) {
            if (err.name != "EOF") {
                print("read error: ", err);
            }
            return client.close(fn -> clients[client.id] = nil);
        }
        if (data != nil) {
            client.write(data, fn err {
                if (err != nil) {
                    return print("write error: ", err);
                }
            });
        }
    };
}

fn onConnection err {
    if (err != nil) {
        return print("connection error: ", err);
    }
    let client = spnuv.TCP.new(loop);
    server.accept(client);
    clients[client.id] = client;
    client.read(onRead(client));
}

fn signalCallback signum {
    signal.close();
    clients.foreach(fn client -> client.close());
    server.close();
}

server.bind("0.0.0.0", 1234);
server.listen(onConnection);

signal.start(SIGINT, signalCallback);

print("Server listening on 0.0.0.0:1234");

loop.run();
